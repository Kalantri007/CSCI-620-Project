{"ast":null,"code":"var _jsxFileName = \"/home/vkalantri/CSCI-620-Project/chess_app/frontend/src/pages/GamePage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ChessBoard from '../components/ChessBoard';\nimport api from '../services/api';\nimport '../styles/GamePage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GamePage = () => {\n  _s();\n  const {\n    gameId\n  } = useParams();\n  const [gameData, setGameData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userColor, setUserColor] = useState('white');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameStatus, setGameStatus] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n  const [opponentUsername, setOpponentUsername] = useState('');\n  const navigate = useNavigate();\n  const websocket = useRef(null);\n  useEffect(() => {\n    // Function to fetch game data from the backend\n    const fetchGameData = async () => {\n      try {\n        const data = await api.getGame(gameId);\n        setGameData(data);\n        setMoveHistory(data.moves);\n\n        // Determine user's color and opponent\n        const currentUser = localStorage.getItem('username');\n        if (currentUser === data.white_player.username) {\n          setUserColor('white');\n          setOpponentUsername(data.black_player.username);\n        } else {\n          setUserColor('black');\n          setOpponentUsername(data.white_player.username);\n        }\n\n        // Set game status\n        setGameStatus(data.status);\n        updateStatusMessage(data.status, data.result);\n        setLoading(false);\n      } catch (err) {\n        setError(err.message || 'An error occurred while loading the game');\n        setLoading(false);\n      }\n    };\n    fetchGameData();\n\n    // Set up WebSocket connection for real-time game updates\n    const setupWebSocket = () => {\n      const wsScheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\n      const token = localStorage.getItem('authToken');\n      const gameSocket = new WebSocket(`${wsScheme}127.0.0.1:8000/ws/game/${gameId}/?token=${token}`);\n      let reconnectTimer = null;\n      gameSocket.onopen = () => {\n        console.log('WebSocket connection established');\n        // Clear any reconnect timers if we connected successfully\n        if (reconnectTimer) {\n          clearTimeout(reconnectTimer);\n          reconnectTimer = null;\n        }\n        setError(null); // Clear any previous connection errors\n      };\n      gameSocket.onmessage = e => {\n        const data = JSON.parse(e.data);\n        console.log('Received WebSocket message:', data);\n        if (data.type === 'connection_established') {\n          console.log('WebSocket connection confirmed by server');\n        } else if (data.type === 'error') {\n          setError(`Server error: ${data.message}`);\n        } else if (data.type === 'move') {\n          // Update game state with new move\n          const updatedGameData = {\n            ...gameData\n          };\n          updatedGameData.fen = data.fen;\n          updatedGameData.moves = [...updatedGameData.moves, data.move];\n          setGameData(updatedGameData);\n          setMoveHistory(updatedGameData.moves);\n        } else if (data.type === 'game_update') {\n          // Update entire game state\n          setGameData(data.game);\n          setMoveHistory(data.game.moves);\n          updateStatusMessage(data.game.status, data.game.result);\n        }\n      };\n      gameSocket.onclose = e => {\n        console.warn('WebSocket connection closed:', e);\n\n        // Only attempt to reconnect if it wasn't a normal closure\n        if (e.code !== 1000) {\n          setError('Connection to game server lost. Attempting to reconnect...');\n\n          // Attempt to reconnect after a delay\n          reconnectTimer = setTimeout(() => {\n            if (websocket.current) {\n              websocket.current = setupWebSocket();\n            }\n          }, 3000);\n        }\n      };\n      gameSocket.onerror = err => {\n        console.error('WebSocket error:', err);\n        setError('Connection error. We\\'ll try to reconnect automatically.');\n      };\n      return gameSocket;\n    };\n\n    // Setup WebSocket and store reference\n    websocket.current = setupWebSocket();\n\n    // Clean up function\n    return () => {\n      if (websocket.current && websocket.current.readyState === WebSocket.OPEN) {\n        websocket.current.close(1000, \"Component unmounting\");\n      }\n    };\n  }, [gameId]);\n  const updateStatusMessage = (status, result) => {\n    if (status === 'finished') {\n      if (result === 'white_win') {\n        setStatusMessage('White wins!');\n      } else if (result === 'black_win') {\n        setStatusMessage('Black wins!');\n      } else if (result === 'draw') {\n        setStatusMessage('Game ended in a draw');\n      }\n    } else if (status === 'active') {\n      setStatusMessage('Game in progress');\n    } else {\n      setStatusMessage('Waiting for players');\n    }\n  };\n  const handleMove = async move => {\n    try {\n      // Send move to the backend via API\n      await api.makeMove(gameId, move);\n\n      // No need to update UI here as the WebSocket will handle that\n    } catch (err) {\n      setError('Failed to submit move. Please try again.');\n      console.error(err);\n    }\n  };\n  const handleResign = async () => {\n    if (window.confirm('Are you sure you want to resign this game?')) {\n      try {\n        await api.resignGame(gameId);\n        // WebSocket will handle the game status update\n      } catch (err) {\n        setError('Failed to resign. Please try again.');\n        console.error(err);\n      }\n    }\n  };\n  const handleGoToHome = () => {\n    navigate('/');\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"loading\",\n    children: \"Loading game...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 174,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-message\",\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 21\n  }, this);\n  if (!gameData) return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"error-message\",\n    children: \"Game not found\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Chess Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-info\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"players-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"White:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 15\n            }, this), \" \", gameData.white_player.username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"player-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Black:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 15\n            }, this), \" \", gameData.black_player.username]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"status-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"game-status\",\n            children: statusMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 13\n          }, this), gameData.status === 'active' && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"current-turn\",\n            children: gameData.fen.split(' ')[1] === 'w' ? \"White's turn\" : \"Black's turn\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board-container\",\n      children: /*#__PURE__*/_jsxDEV(ChessBoard, {\n        position: gameData.fen,\n        onMove: handleMove,\n        orientation: userColor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-controls\",\n      children: [gameData.status === 'active' && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"resign-button\",\n        onClick: handleResign,\n        children: \"Resign\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"home-button\",\n        onClick: handleGoToHome,\n        children: \"Back to Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-history\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Move History\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"move-list\",\n        children: moveHistory.length > 0 ? /*#__PURE__*/_jsxDEV(\"ol\", {\n          children: moveHistory.map((move, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: move.move_notation\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No moves yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"dyh+s2YpXz4L2RLIrMrTC+fkqCY=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","useNavigate","ChessBoard","api","jsxDEV","_jsxDEV","GamePage","_s","gameId","gameData","setGameData","loading","setLoading","error","setError","userColor","setUserColor","moveHistory","setMoveHistory","gameStatus","setGameStatus","statusMessage","setStatusMessage","opponentUsername","setOpponentUsername","navigate","websocket","fetchGameData","data","getGame","moves","currentUser","localStorage","getItem","white_player","username","black_player","status","updateStatusMessage","result","err","message","setupWebSocket","wsScheme","window","location","protocol","token","gameSocket","WebSocket","reconnectTimer","onopen","console","log","clearTimeout","onmessage","e","JSON","parse","type","updatedGameData","fen","move","game","onclose","warn","code","setTimeout","current","onerror","readyState","OPEN","close","handleMove","makeMove","handleResign","confirm","resignGame","handleGoToHome","className","children","fileName","_jsxFileName","lineNumber","columnNumber","split","position","onMove","orientation","onClick","length","map","index","move_notation","_c","$RefreshReg$"],"sources":["/home/vkalantri/CSCI-620-Project/chess_app/frontend/src/pages/GamePage.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { useParams, useNavigate } from 'react-router-dom';\nimport ChessBoard from '../components/ChessBoard';\nimport api from '../services/api';\nimport '../styles/GamePage.css';\n\nconst GamePage = () => {\n  const { gameId } = useParams();\n  const [gameData, setGameData] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userColor, setUserColor] = useState('white');\n  const [moveHistory, setMoveHistory] = useState([]);\n  const [gameStatus, setGameStatus] = useState('');\n  const [statusMessage, setStatusMessage] = useState('');\n  const [opponentUsername, setOpponentUsername] = useState('');\n\n  const navigate = useNavigate();\n  const websocket = useRef(null);\n\n  useEffect(() => {\n    // Function to fetch game data from the backend\n    const fetchGameData = async () => {\n      try {\n        const data = await api.getGame(gameId);\n        setGameData(data);\n        setMoveHistory(data.moves);\n        \n        // Determine user's color and opponent\n        const currentUser = localStorage.getItem('username');\n        if (currentUser === data.white_player.username) {\n          setUserColor('white');\n          setOpponentUsername(data.black_player.username);\n        } else {\n          setUserColor('black');\n          setOpponentUsername(data.white_player.username);\n        }\n\n        // Set game status\n        setGameStatus(data.status);\n        updateStatusMessage(data.status, data.result);\n        \n        setLoading(false);\n      } catch (err) {\n        setError(err.message || 'An error occurred while loading the game');\n        setLoading(false);\n      }\n    };\n\n    fetchGameData();\n\n    // Set up WebSocket connection for real-time game updates\n    const setupWebSocket = () => {\n      const wsScheme = window.location.protocol === 'https:' ? 'wss://' : 'ws://';\n      const token = localStorage.getItem('authToken');\n      const gameSocket = new WebSocket(\n        `${wsScheme}127.0.0.1:8000/ws/game/${gameId}/?token=${token}`\n      );\n\n      let reconnectTimer = null;\n      \n      gameSocket.onopen = () => {\n        console.log('WebSocket connection established');\n        // Clear any reconnect timers if we connected successfully\n        if (reconnectTimer) {\n          clearTimeout(reconnectTimer);\n          reconnectTimer = null;\n        }\n        setError(null); // Clear any previous connection errors\n      };\n\n      gameSocket.onmessage = (e) => {\n        const data = JSON.parse(e.data);\n        console.log('Received WebSocket message:', data);\n        \n        if (data.type === 'connection_established') {\n          console.log('WebSocket connection confirmed by server');\n        } else if (data.type === 'error') {\n          setError(`Server error: ${data.message}`);\n        } else if (data.type === 'move') {\n          // Update game state with new move\n          const updatedGameData = { ...gameData };\n          updatedGameData.fen = data.fen;\n          updatedGameData.moves = [...updatedGameData.moves, data.move];\n          setGameData(updatedGameData);\n          setMoveHistory(updatedGameData.moves);\n        } else if (data.type === 'game_update') {\n          // Update entire game state\n          setGameData(data.game);\n          setMoveHistory(data.game.moves);\n          updateStatusMessage(data.game.status, data.game.result);\n        }\n      };\n\n      gameSocket.onclose = (e) => {\n        console.warn('WebSocket connection closed:', e);\n        \n        // Only attempt to reconnect if it wasn't a normal closure\n        if (e.code !== 1000) {\n          setError('Connection to game server lost. Attempting to reconnect...');\n          \n          // Attempt to reconnect after a delay\n          reconnectTimer = setTimeout(() => {\n            if (websocket.current) {\n              websocket.current = setupWebSocket();\n            }\n          }, 3000);\n        }\n      };\n\n      gameSocket.onerror = (err) => {\n        console.error('WebSocket error:', err);\n        setError('Connection error. We\\'ll try to reconnect automatically.');\n      };\n      \n      return gameSocket;\n    };\n\n    // Setup WebSocket and store reference\n    websocket.current = setupWebSocket();\n\n    // Clean up function\n    return () => {\n      if (websocket.current && websocket.current.readyState === WebSocket.OPEN) {\n        websocket.current.close(1000, \"Component unmounting\");\n      }\n    };\n  }, [gameId]);\n\n  const updateStatusMessage = (status, result) => {\n    if (status === 'finished') {\n      if (result === 'white_win') {\n        setStatusMessage('White wins!');\n      } else if (result === 'black_win') {\n        setStatusMessage('Black wins!');\n      } else if (result === 'draw') {\n        setStatusMessage('Game ended in a draw');\n      }\n    } else if (status === 'active') {\n      setStatusMessage('Game in progress');\n    } else {\n      setStatusMessage('Waiting for players');\n    }\n  };\n\n  const handleMove = async (move) => {\n    try {\n      // Send move to the backend via API\n      await api.makeMove(gameId, move);\n      \n      // No need to update UI here as the WebSocket will handle that\n    } catch (err) {\n      setError('Failed to submit move. Please try again.');\n      console.error(err);\n    }\n  };\n\n  const handleResign = async () => {\n    if (window.confirm('Are you sure you want to resign this game?')) {\n      try {\n        await api.resignGame(gameId);\n        // WebSocket will handle the game status update\n      } catch (err) {\n        setError('Failed to resign. Please try again.');\n        console.error(err);\n      }\n    }\n  };\n\n  const handleGoToHome = () => {\n    navigate('/');\n  };\n\n  if (loading) return <div className=\"loading\">Loading game...</div>;\n  if (error) return <div className=\"error-message\">Error: {error}</div>;\n  if (!gameData) return <div className=\"error-message\">Game not found</div>;\n\n  return (\n    <div className=\"game-page\">\n      <div className=\"game-header\">\n        <h1>Chess Game</h1>\n        <div className=\"game-info\">\n          <div className=\"players-info\">\n            <div className=\"player-info\">\n              <strong>White:</strong> {gameData.white_player.username}\n            </div>\n            <div className=\"player-info\">\n              <strong>Black:</strong> {gameData.black_player.username}\n            </div>\n          </div>\n          <div className=\"status-info\">\n            <div className=\"game-status\">{statusMessage}</div>\n            {gameData.status === 'active' && (\n              <div className=\"current-turn\">\n                {gameData.fen.split(' ')[1] === 'w' ? \"White's turn\" : \"Black's turn\"}\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      <div className=\"game-board-container\">\n        <ChessBoard \n          position={gameData.fen}\n          onMove={handleMove}\n          orientation={userColor}\n        />\n      </div>\n      \n      <div className=\"game-controls\">\n        {gameData.status === 'active' && (\n          <button className=\"resign-button\" onClick={handleResign}>Resign</button>\n        )}\n        <button className=\"home-button\" onClick={handleGoToHome}>Back to Home</button>\n      </div>\n      \n      <div className=\"game-history\">\n        <h3>Move History</h3>\n        <div className=\"move-list\">\n          {moveHistory.length > 0 ? (\n            <ol>\n              {moveHistory.map((move, index) => (\n                <li key={index}>{move.move_notation}</li>\n              ))}\n            </ol>\n          ) : (\n            <p>No moves yet</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default GamePage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}